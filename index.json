[{"categories":["essay"],"content":"对于我来说，生活的盼头，就是在获得立身之本的智慧的同时，去追寻自己所热爱的东西，不断发掘这个世界的多元性并与之建立联系。 比如我喜欢新西兰民谣、风光摄影和cg作品，在课业之余我就会给自己一段时间去享受，长短不重要，重要的是那种纯粹的、无目的性的感觉。 某些机缘巧合下我发现花花的歌、人像摄影、还有国风水墨画也挺不错，那么我就会觉得：欸，这些领域我也可以挖掘一下。 我认为这个就是追寻热爱、发掘多元性的过程，它带给我纯粹的快乐。 我们可以有这样的想法，但常常会迷失，包括我自己。 而迷失的诱因主要有两点：成长环境、心理环境。 这两点如果讲深了感觉可以写篇专业论文哈哈，不过经历过的应该懂的都懂，我就直接给出我的处理方式。 而对一个人成长环境影响最大的就是家庭，人生不像是打游戏，不会从”请选择你的英雄“开始。我们不能保证我们的家庭质量，但是我们可以选择自己的活法，将人生的控制权掌控在自己的手里。最差的情况，如果感觉周围没有人能理解你，例如父母的不支持抑或是伤害、朋友的不理解。那就不妨孤身一人，过滤掉外界的噪声。当然这里不是建议大家一直寡着，而是需要有一种把自己交给自己的能力，如果有一对能无时无刻支持自己的父母，或是能找到一两个知己，那都是再好不过的。 然后是心理环境，迷失主要源于不断的自我怀疑。很多时候我们自以为可以被称为烦恼的东西其实都不是烦恼，在时间的长河里甚至连浪花都算不上。不妨想一想，你有多少次烦恼源于自我否定。例如，我认为自己没有好听的声音，所以不能上台唱歌；或是我认为自己没有足够的实力，所以无法参加比赛等等。能不能自由的表演只有在你尝试了才知道，所以，如果真心想做，大胆去做、不断练习就可以了，没有那么多犹豫与烦恼，只有决心的有无。 安身立命、强大内心、追逐热爱，永远闪闪发光。 祝愿看到这篇随笔的各位都能找寻到自己想要的生活。 希望对最近情绪状态不好的uu们能有所帮助。 ","date":"2022-10-30","objectID":"/%E7%9B%BC%E5%A4%B4/:0:0","tags":["迷失","盼头"],"title":"拨云开雾处，是一片星河","uri":"/%E7%9B%BC%E5%A4%B4/"},{"categories":[],"content":" 文章的部分内容被密码保护： --- DON'T MODIFY THIS LINE --- Monarch System 该系统会不断优化，要按照规范多多练习，最终形成解决问题的基本原则。在这里对system的介绍是总分样式。 ","date":"2022-09-16","objectID":"/system/:0:0","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"Project System（多系统整合） ","date":"2022-09-16","objectID":"/system/:1:0","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"内核 ~ Breaking System 处理信息的基本单元 ","date":"2022-09-16","objectID":"/system/:1:1","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"立项 思考你的目标，自顶向下，确定需要的筹码 ","date":"2022-09-16","objectID":"/system/:1:2","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"面向需求～Decision_making system 经过此步可得到一个完整的决策树 ","date":"2022-09-16","objectID":"/system/:1:3","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"项目生命期～time system 考虑时间线，为决策树的每一个树枝分配相应时间，自顶向下 绘制项目进度规划表（可使用工具完成）包含以下内容： 项目名 考虑项目时间要求 项目阶段划分，按照优先级，通常优先级取决于ddl+价值 项目二级环节展开，进行更细致的划分 考虑完成速度的上下限，计算一个范围，获得理论时间长度 按照个人能量与作息进行具体到天的分配 得到架构体系 ","date":"2022-09-16","objectID":"/system/:1:4","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"风险计算 考虑潜在的突发事件，做好应对，考虑晚间余闲的选择，凡事留有余地。 设计中期检测环节，检测目标完成情况，及时调整。 ","date":"2022-09-16","objectID":"/system/:1:5","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"推进内核～learning system+feedback system 事件管理 将事件体系划分为主线与支线来进行维护，而划分的依据是你的目的或者说追求。 对于主线，谋划、行动与复盘是三个基本原则，它们的实质为状态的维护。 精力管理 根据自身的习惯在不同时段安排不同任务 阶段封装 有始有终，这样便于在不同阶段调用另一时段的信息，环环相扣；同时在每个阶段的开始都可以做到至简。 ","date":"2022-09-16","objectID":"/system/:1:6","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"Breaking System 信息的基本处理单元。思考\u003e存储：大脑是用来思考问题的，不是单单用来做信息存储的，所以要将一些低效信息进行外置，以保证高效的思考。 ","date":"2022-09-16","objectID":"/system/:2:0","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"信息拆解 对于一个目标信息，我们可以从其本意出发，提取关键因子，根据给出的关系，进行因子的连接。最终我们可以得到因子图——链式与树形。 这一步也是决定思考速度的关键步骤即加快多目标因子的关联速度，进行推理与思考。通常这一步可以用稿纸辅助进行。 ","date":"2022-09-16","objectID":"/system/:2:1","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"信息延拓 在得到以上因子图后，我们就可以根据已有信息进行延拓与猜想或者深入，得到我们想要的一些结论。 ","date":"2022-09-16","objectID":"/system/:2:2","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"剔除猜想 很多信息都是问题的另一种形式，这个时候，延拓就是很多个猜想的集合，但许多猜想可能都是无效的或有错误的，因此我们需要将这些猜想剔除，不断优化我们解决问题的路径。 ","date":"2022-09-16","objectID":"/system/:2:3","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"任务拆分（应对复杂体系） 根据某种路径将任务粒度划分得足够细、足够具体，这是第一步。然后非常关键的一步是进行重心转移。 ","date":"2022-09-16","objectID":"/system/:2:4","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"Decision_making System ","date":"2022-09-16","objectID":"/system/:3:0","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"提出需求或问题 有需求才有决策，尽可能进行多维度的思考，发散性寻找合理决策 ","date":"2022-09-16","objectID":"/system/:3:1","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"决策分析 仔细分析有哪些选择，剔除干扰因素，缩小范围 ","date":"2022-09-16","objectID":"/system/:3:2","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"目标导向 你的目标是什么，有哪些决策复合你的目标，进行初步筛选 ","date":"2022-09-16","objectID":"/system/:3:3","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"量化分析 对符合你目标的决策进行比较分析 找到可量化的指标，减少情绪等感性因素的影响 设置量化规则（上下限）与各要素权重 打分 得出结论 ","date":"2022-09-16","objectID":"/system/:3:4","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"方案打磨 完成决策逻辑 描述基本思路，打草稿 撰写方案文档，逻辑层层递进（注意分级） 关键是形成一个好的闭环（从一个想法出发到实现这个想法） deepthink 思考达成目标要求需要做哪些事，用到哪些资源，搭建一个框架 按照执行逻辑，推演任务进程 深入思考严格规划每个模块的耗时，当然这建立在合理模块的基础上，一个合理模块的要求是任务的内容与步骤一定是清晰的。 考虑应对风险的措施，做好对冲 在保证深度的基础上拓宽广度，就是高层次的特点与能力 绘制决策树 给出可视化方案，简化理解 ","date":"2022-09-16","objectID":"/system/:3:5","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"Time System ","date":"2022-09-16","objectID":"/system/:4:0","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"时间有限性 时间是任何项目的筹码，它的价值由意图、项目价值、结果反馈三方面加权来衡量。时刻意识到时间有限，价值一去不复返的特性，但不要患得患失，because life is a beautiful story.参考乔帮主的时间生命论。 ","date":"2022-09-16","objectID":"/system/:4:1","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"标准化 采用时间块的方式来划分一天 T 5:20-5:40 5:40-6:20 6:20-7:00 A 7:00-7:45 8:00-8:45 9:00-9:45 10:00-10:45 11:00-11:30 P1 11:30-11:45 12:00-12:20 12:20–12:45 B 13:00-13:45 14:00-14:45 15:00-15:45 16:00-16:45 17:00-17:30 P2 17:30-18:00 C 18:00-18:45 19:00-19:45 20:00-20:45 21:00-21:30 K 21:30-22:00 22:00-22:45 每个时段、每个项目的实现算法一定要明确，建议每个时段的前5分钟置为谋划阶段，想清楚目的，打造什么样的体系，整体流程应该是怎样，观全局。一头一尾做到位，中间流程做到细节，就足够了。 ","date":"2022-09-16","objectID":"/system/:4:2","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"赋值 判断一个阶段的时间投入 小步试错，先完成一个闭环，统计一个闭环所需时间 设置时间波动范围，根据下文提及的woop预估障碍 得到整体耗时 ","date":"2022-09-16","objectID":"/system/:4:3","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"时间延拓 当一个任务需要更多的时间，可以采用时间延拓的方式，将一部分优先级较低的任务放在每日余闲（21:00 - 21:45)或周六完成。 ","date":"2022-09-16","objectID":"/system/:4:4","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"Learning System 行胜于言，这是我们面向学习对象的主要解决流程。 ","date":"2022-09-16","objectID":"/system/:5:0","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"取势，明道，优术 取势：了解相关资源，做好信息整合，以终为始，将问题带入整个过程，明辨轻重。 明道：确定学习内容，做好系统化的初步架构，找到出发点，然后走下去。通常，内容有两大类： 知识型内容：专注于知识点，内容之间的逻辑与知识博客 技术型内容：专注于构型、实操与技术博客 优术：反馈与经验总结（加速反馈是关键） ","date":"2022-09-16","objectID":"/system/:5:1","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"结构化，总分总 在了解相关资源与进行学习的过程中，要按照总分总的流程来遍历各要素 总：了解结构，建立大局观 分：找到一个合适的出发点，建立学习线路，进一步连接各要素 总：将所有要素串起，进行自我指导复盘或检测、解决一个问题 ","date":"2022-09-16","objectID":"/system/:5:2","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"步步为营 以解决问题为方向(价值与意义的体现），要意识到注意力是有限的，需要开源节流，所以我们需要进行目标分解，每个阶段解决一个关键问题（可包含子问题，但都归属于同一分类）。 起步会有一段适应期，所以起步状态就是一个初步的试错，是具有很高价值的，时刻明白自己在做什么，要做什么，做到及时调整，保持专注。以下是关于试错的一个标准化方案。 ","date":"2022-09-16","objectID":"/system/:5:3","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"试错与初始化 试错要满足中门槛，获得启动惯性（中门槛：具有挑战性但又不是特别困难的任务）。 通过试错，我们来获得任务的相关信息，比如难度、基本安排与划分、所需时间的上下限。具体可参考下述Time System的赋值部分 需要通过试错来建立相关范式提高效益，例如对于一些重要因子的记录与分析，得到一些有规律性的特征信息。 具体的，从有目的性假设开始，在一定时间（例如一周），时刻观察任务的推进效率，快速迭代，不断修改假设，直至找到一个限度，在这个限度下有最高的效率与动力，也就是同时满足身心条件，以落实为基本的评价标准。换种说法，就是找到推进的”挑战区“，即达到不断用已知（确保扎实）去挑战未知的状态。 ","date":"2022-09-16","objectID":"/system/:5:4","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"知识树与连接 网络化树结构是我们的知识存储方式，它依托于第一性原理。 对于任何一个领域，都可以用第一性原理解构，先建立大局观，不过多深入细节。 它要求前期稳固基础，深入领域根部，因为前期所做的一切都是在为后期的指数级增长埋下伏笔。 在积累的过程中，要时刻注意知识纵向的衍化关系，以及横向的比较关系。 总而言之，注意每一点间的连接，而逻辑，是我们进行连接的核心。 我们的目标是多元化与快速有效的学习。 在进行知识树的构造时，遇到难题在所难免，这个时候我们需要以挑战的心态面对问题。 这是最为关键的部分，在这样的体系下，一切问题都可以被体系化与简单化 ","date":"2022-09-16","objectID":"/system/:5:5","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"周期性强化 在连接的过程中，难免会有不稳定的地方，这个时候我们就要做到周期性的强化。尽量满足遗忘曲线的规律，即学完一个知识后，当天先做一个回顾，第二天再做一个回顾，周末在进行整体遍历时再回顾一次。 ","date":"2022-09-16","objectID":"/system/:5:6","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"特征工程 以上仅仅是学习直觉的起点，还要注意加入目标知识的特征判别，即考虑目标的特殊性。在基本learning system中加入目标特殊性使得模型能够高度拟合最大学习效率模型。 对于需要立项的知识（知识量比较大、第一次做且非常有价值的）集合，我们需要建立一个知识优化库，在学习与积累的过程中不断将一些心得与可优化的地方记录在一起，其实这样的操作就类似于写工作日志，但可以更开放，因为这样有两个目的，其一是精益求精，掌握当前的任务动向，其二是为了日后再复盘时能够非常快地索引到对应知识点，所以一定要提取其中的关键词。 ","date":"2022-09-16","objectID":"/system/:5:7","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"Replay System ","date":"2022-09-16","objectID":"/system/:6:0","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"阶段性总结 日记、周记、月记、季度规划、岁末回想 一定要有长盘决策 从季度规划到日记，是一个逐渐细致入微的过程。也就是说，在大层面纵观大局，在小层面体察如微，二者兼具，才能做到完整的系统状态维护。 日记，始终看齐这一周 时间 做了什么 各事项方案是什么 结果怎么样 感受是什么 需要调整吗 周记，始终看齐这个月 总结回顾一周成果，有哪些做到了，哪些没做到 收集每天的问题 优化系统 调整下周的节奏 月记，始终看齐这个季度 观察有无完成月计划 回顾每周的成果，进行一个连接 撰写月成果总结 调整下个月的节奏 季度规划，始终看齐这一年 岁末回想 观察长盘决策的执行率 回顾每个月的成果 撰写岁末回想（各方面） 调整第二年的长盘决策 ","date":"2022-09-16","objectID":"/system/:6:1","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"注意 在回顾也即复盘方面，要做到感性与理性的双重兼顾，感性方面表现为调和，理性方面表现方法。 ","date":"2022-09-16","objectID":"/system/:6:2","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"效果反馈 相辅相成的三个方法： 白纸检测，从0绘制知识树 费曼法，对算法或知识树按教导的标准在逻辑层面进行主动地推演，具体动作主要有模型归纳与实例类比，既增强趣味性，又能够强化理解和记忆。 重构，费曼法的下一阶段，将推演出来的逻辑逐步实现 ","date":"2022-09-16","objectID":"/system/:6:3","tags":[],"title":"System","uri":"/system/"},{"categories":[],"content":"1. 本地配置 ","date":"2022-09-13","objectID":"/blogstory/:1:0","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"1.1 git相关资源下载 下载git 安装相关包管理器，例如npm和yum，包管理器中含有某些博客主题需要的依赖 设置git账号：global、local ","date":"2022-09-13","objectID":"/blogstory/:1:1","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"1.2 hugo下载 上官方网站进行下载，详情请见hugo release，注意下载hugo-extended版，适配性更强。 下载完毕后，将文件路径/bin加入环境变量，重启电脑，打开命令行输入命令hugo version，若产生hugo版本号则证明安装完成。 ","date":"2022-09-13","objectID":"/blogstory/:1:2","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"1.3 博客的配置 主流的个人博客搭建引擎包括hexo和hugo，这两个文件的主要差别在于主题配置的读取上，hexo博客根目录下的config.yaml文件比theme主题内置的config.yaml文件优先级更低，如果在根目录配置下指明了主题文件信息，那么引擎就会优先渲染后者；hugo与此相反，更侧重于主题文件的更新维护，所以一般需要将主题文件的配置拷贝到根目录下。具体的差异可以参考hexo与hugo的异同。 我的博客用的是hugo-lovelt主题，主题配置参考lovelt官方文档即可，根目录主题配置记得参照主题文档examplesite下的.conf文件。 在博客的主题的选择上，我踩了很多坑，一些主题文档的维护相当不好。在选择一款喜欢的主题时，一定要关注官方文档的质量哦。 ","date":"2022-09-13","objectID":"/blogstory/:1:3","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"2. 云服务器配置 ","date":"2022-09-13","objectID":"/blogstory/:2:0","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"2.1 云主机购买与配置 云主机的选择：阿里云、腾讯云、华为云，这三款是主流。 关于云主机的购买，具体可参考acwing-linux相关课程： 云服务器的购买 云主机的配置： 我购买的是腾讯云的轻量级服务器，系统为linux下的ubuntu。在系统分配好云主机后，我们的初始化登录是一个叫ubuntu的账户。与一般的云服务器不同，腾讯云初始化没有root用户，但ubuntu拥有sudo权限。注意sudo权限与root权限有一定差异。具体的差异详见sudo与root。 然后我们可以进行的一些操作： 2.1.1 创建acs用户 建立： # ubuntu根目录~下 adduser acs # 创建用户acs usermod -aG sudo acs # 给用户acs分配sudo权限 查看是否成功： 注意当我们cd acs或ubuntu时会进入到它们的根目录，但这个电脑下的系统设置文件在/下，也就是说，我们需要cd /才能看到到这台主机下的所有配置文件。同时，我们之后下载的很多文件都会被保存在/etc中。 2.1.2 安装tmux和docker tmux安装教程 sudo apt-get update # linux从服务器获取软件更新情况 sudo apt-get install tmux 在安装完成后，可以通过scp将一些tmux配置文件上传至云端，启用tmux，然后在命令行进行些许配置即可完成对tmux的美化。 tmux # ctrl + b : 进入tmux命令行模式 source-file ~/.tmux.conf # 让tmux配置生效 docker安装教程 在用户（有sudo权限，比如ubuntu）根目录下，按照docker-ubuntu 安装说明中的\"Install using the repository\"进行安装即可，注意一条条cv执行命令。 ","date":"2022-09-13","objectID":"/blogstory/:2:1","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"2.2 域名的购买与ssl证书申请 购买方面，挑选自己喜欢的域名进行购买即可。 在购买完域名后，需要经过实名验证、域名审核等流程。 之后可以申请ssl安全证书，一切按照腾讯云指引操作即可。 在申请完成后，可以对证书进行下载，会得到五个文件，我们只需要将其中的密钥对文件进行移动就行，后缀分别为.crt和.key，目标位置为/etc/nginx 为了网站长期的运行，我们需要对域名进行备案，这是国内的法律要求。 ","date":"2022-09-13","objectID":"/blogstory/:2:2","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"2.3 nginx的下载与配置 2.3.1 nginx下载与基础配置 下载方面，可以参照ubuntu安装nginx，内容非常详细，特别注意不同文件的安装位置，由于root用户初始化一般不存在，所以在安装时应该在sudo权限用户下使用sudo apt-get install nginx进行安装。 在安装完成后，我们进行一些基础设置： # 设置开机启动nginx sudo systemctl enable nginx # 启动nginx sudo systemctl start nginx # 查看是否启动nginx sudo systemctl status nginx # 逐行执行 在浏览器搜索框输入服务器公网ip地址，如果会出现nginx的页面，说明可以导航到服务器，即nginx安装成功。为了使外部用户可以访问web服务器，需要开放防火墙，主要是80端口和443端口，可以在服务器的控制台手动设置，同时也可以命令行设置： sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload 2.3.2 nginx高级配置 仿照hugo-txcloud-nginx中的nginx.conf进行配置即可。 ","date":"2022-09-13","objectID":"/blogstory/:2:3","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"3. 建立本地与云端的联系 ","date":"2022-09-13","objectID":"/blogstory/:3:0","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"3.1 初步连接 使用ssh工具进行远程访问 ssh username@server_ip 交互窗口会提醒你输入密码 ","date":"2022-09-13","objectID":"/blogstory/:3:1","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"3.2 配置免密登录 在完成过远程访问后，就可以配置免密登录。 在本地进入 ~/.ssh ssh-keygen -t rsa 生成密钥，按照指引为密钥添加文件名 密钥生成教程可访问 https://blog.csdn.net/qq_40932679/article/details/117487540 然后按照下述命令将公钥添加到远程服务器，最终会被添加在.ssh中的authorized_key文件内 ssh-agent bash # 启动ssh高速缓存 ssh-add -i ~/.ssh/txcloud.pub username@server_ip # 将公钥添加到目标用户端下 关于ssh-agent可以参考 https://blog.csdn.net/weixin_43972437/article/details/114578337 接着，在.ssh/查看有无config文件，若没有就新建一个 打开config文件，按照如下格式进行配置 # 腾讯云 Host server1 HostName 43.143.88.173 User acs IdentityFile ~/.ssh/txcloud Host server0 HostName 43.143.88.173 User ubuntu IdentityFile ~/.ssh/txcloud 这样我们的免密登录就配置好了，注意到，对不同用户要进行分别配置，但它们所使用的公密钥可以相同。 ","date":"2022-09-13","objectID":"/blogstory/:3:2","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"3.3 使用winscp与云端进行图形化文件交互 winscp下载 如果连接用户并非root用户，参考winscp修复远程连接进行修改 ","date":"2022-09-13","objectID":"/blogstory/:3:3","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"4. 建立本地与github的联系 ","date":"2022-09-13","objectID":"/blogstory/:4:0","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"4.1 git账号管理 使用邮箱注册github账号，并登录 在本地使用命令ssh-keygen -t rsa -C \"username@server_ip\"生成注释 为“username@server_ip”的密钥对，在生成的过程中可以为密钥对命名。然后将公钥.pub文件的内容进行复制，在github用户setting下的SSH and GPG keys模块新建ssh key，key name任意取，将公钥内容添加到下方加密区，完成添加。 回到本地， 如果git存在多账号，那么需要按如下方式进行管理，打开config文件: # github user Host X Hostname github.com User BreezEcho PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_x # github user Host Y Hostname github.com User huansong-dev PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_y 关于git多账号配置详情请见 https://www.cnblogs.com/wanan-happy/p/14588504.html 然后将私钥加入ssh-agent进行管理：ssh-add id_rsa_x 、ssh-add id_rsa_y 在配置完成后，可以使用ssh -T git@X来检验是否完成了连接 为了使用便利，我们可以将常用的账号设置为全局账号 git config --global user.name username git config --global user.email useremail 如果在某个仓库需要使用特殊账号，可以进行如下操作 cd base # 进入该仓库 git config --local user.name username git config --local user.email useremail ","date":"2022-09-13","objectID":"/blogstory/:4:1","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"4.2 建立本地仓库与远程仓库的联系 远程新建名为为user_id.src的私人仓库，用于管理博客项目 本地新建仓库hblog，如果是hugo site，执行hugo new site hblog 在设置好仓库账号后，进入hblog，并按照如下操作进行关联 git init # 初始化为git本地仓库 git remote -v # 查看关联情况 git remote add origin git@X:username/username.github.io.git # 建立联系 ","date":"2022-09-13","objectID":"/blogstory/:4:2","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"4.3 博客项目文件推送 # 进入博客根目录 touch .nojekyll # 默认不使用github pages自带的jekyll主题，空文件 git add . # 为所有文件添加追踪，之后的一切变化都可以通过git status进行查看 git commit -m \"ud\" # 将追踪文件的变化上传到本地仓库 git push -u origin master # 首次推送信息，之后可以将-u省去 之后如果远程仓库有变化，需要先git pull origin master，可能会出现git merge提醒，这个时候允许合并，然后再执行上述步骤。 ","date":"2022-09-13","objectID":"/blogstory/:4:3","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"5. 使用github actions将博客展示文件部署到github pages与云端服务器 主要参考： hugo双端部署，给我最大灵感的文章。 hugo+github action 少数派 ","date":"2022-09-13","objectID":"/blogstory/:5:0","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"5.1 github actions + public -\u003e github pages 5.1.1 赋予项目仓库访问本账号下其它仓库的特权 新建名为user_id.github.io的公共仓库，注意user_id为你的用户名，这样的名称格式相对固定。这个仓库用来展示我们的博客内容。 进入github用户界面的setting下: 选择右上角新建个人密钥，选中repo和workflow，然后点击生成。注意密钥只会出现一次，记得复制。将这里得到的密钥添加到我们项目仓库的actions secrets，并命名为PERSONAL_TOKEN 5.1.2 建立github actions工作流 首先，我们将项目仓库的默认分支改为master(setting中)，然后进入项目actions模块，新建工作流文件gh-pages.yml，配置参考如下，可按需求进行修改： name: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \"0 0 * * *\" jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \"latest\" - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: pseudoyu/pseudoyu.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 然后等待一段时间，就可以看到工作流正常，进入博客展示仓库，可以发现多了一个master分支。 一段时间后，访问站点user_id.github.io就可以看到博客内容啦。 ","date":"2022-09-13","objectID":"/blogstory/:5:1","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"5.2 github actions + public -\u003e txcloud 5.2.1 给予项目仓库访问云服务器的特权 与本地密钥访问云服务器类似，我们需要先得到一个密钥对，然后分别将公钥和密钥置入服务端与用户端。 在本地ssh-keygen -t rsa 创建密钥对，参考上述步骤将公钥放入云端用户的authorized_key中，将私钥放入项目仓库的actions secrets内。 这个操作告诉我们密钥在哪里产生不重要，重要的是公钥与私钥的位置，就像锁与匙。 5.2.2 维护文件权限 在云主机相应用户目录下新建public空文件夹，通过ls -al命令我们发现文件的所有人以及组内用户都是合理的。如果之前public文件位置与此不符，就需要对nginx配置文件进行调整。 5.2.3 更新项目仓库actions文件 在gh-pages.yml文件中添加以下模块，并根据实际情况做一些修改，注意yaml文件的格式。 - name: Deploy Tencent Cloud uses: wlixcc/SFTP-Deploy-Action@v1.2.4 with: username: 'root' #ssh user name server: '${{ secrets.SERVER_IP }}' #引用之前创建好的secret ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }} #引用之前创建好的secret local_path: './public' # 对应我们项目public的文件夹路径，注意不能访问内部文件，因为此处没有令牌 remote_path: '/home/username/' # 对应云上的目录 等待片刻，观察工作流正常，进入云主机对应文件夹，发现文件已更新，同时权限正确。至此，github actions云部署完成。 ","date":"2022-09-13","objectID":"/blogstory/:5:2","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"6. 结语 这次经历让我意识到，弯路，也是成长的一部分；同时，在项目中的学习效率是非常高的，当然还需要不断更新信息搜集算法。这篇文章会在后面慢慢丰富，形成一篇合格的教程。 ","date":"2022-09-13","objectID":"/blogstory/:6:0","tags":[],"title":"BlogStory","uri":"/blogstory/"},{"categories":[],"content":"你好，这是一个测试文档","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"包、变量和函数 待填 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:1:0","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"流程控制语句（for、if、else、switch和defer） 待填 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:2:0","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"实用的类型 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:3:0","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"切片 相关特性 切片的长度len：切片内包含元素的数量 切片的容量cap：受切片起点影响，由当前对数组引用形成的切片起点，到原数组末的元素数量 当切片的长度与容量皆为0，则切片又被命名为nil（零值） 特点 切片是基于数组但又更灵活的 通过append(s, elem)能够将若干元素加入切片 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:3:1","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"Range遍历 可以用Range来遍历数组 Range在遍历各元素时，会返回当前元素的下标和数值，因此在循环遍历中需要用两个变量来承接，如果不需要某个方面如下标，可以用_填充该方面，一般会先返回下标，再返回数值。若只要索引，可以忽略掉第二个变量 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:3:2","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"映射 相关描述 映射将键连接到值 映射的零值是nil，nil既没有键，也没有值 make函数会返回给定类型的映射，并将其初始化，通常用make来无参初始化一个映射 m = make(map[int]Vertex) … m[“hello”] = 8 // 对映射进行设置 映射的文法 var m = map[string]Vertex{ \"Bell Labs\": Vertex{ 40.68433, -74.39967, }, \"Google\": Vertex{ 37.42202, -122.08408, }, } 若顶级类型为一个系统类型名，则可以省略，例如上述的{}中的Vertex 对映射的高级处理（在上述基础上） m[“a”] = 1 m[“a”] = 2 // 修改映射 elem = m[“a”] // 获取键对应的值 v, ok = m[“a”] // 查询键a是否在映射中, 若不在映射，则将v作为键“a“的零值 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:3:3","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"函数 函数不仅可以做参数，还可以做函数的返回值 package main import ( \"fmt\" \"math\" ) func compute(fn func(float64, float64) float64) float64 { return fn(3, 4) } // 函数可以做参数 func main() { hypot := func(x, y float64) float64 { return math.Sqrt(x*x + y*y) // 函数可以做返回值 } fmt.Println(hypot(5, 12)) fmt.Println(compute(hypot)) fmt.Println(compute(math.Pow)) } ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:3:4","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"函数的闭包 Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。 也就是说Go函数可以实现自给自足，它的参数由内部参数决定，这样的结构使得其能够简化为名义上的函数值 代码体现： package main import \"fmt\" func adder() func(int) int { sum := 0 return func(x int) int { sum += x return sum } } func main() { pos, neg := adder(), adder() for i := 0; i \u003c 10; i++ { fmt.Println( pos(i), neg(-2*i), ) } } 例如，函数 adder 返回一个闭包。每个闭包都被绑定在其各自的 sum 变量上。 一个闭包的简单示例 // 利用函数的闭包实现斐波那契数列 package main import \"fmt\" // 返回一个“返回int的函数”（注意返回值的书写方法 func fibonacci() func() int { sum := 1 m := -1 return func() int{ k := sum sum += m m = k return sum } } func main() { f := fibonacci() for i := 0; i \u003c 10; i++ { fmt.Println(f()) } } ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:3:5","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"方法和接口 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:4:0","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"方法 1. 用结构体作为方法接收者 Go没有类，但可以为结构体赋予方法，结构体对象可以做方法接收者 type Vertex struct { X, Y float64 } func (v Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } 这样的话就可以调用v.Abs()处理v内部数据 方法只是带接受者参数的函数，但是方法一般不称为函数，如果令v作为Abs的形式参数，那么依然有Abs(v)，存在同样的效果。同时，也可以为非结构体类型声明方法，比如为基本数据类型取别名，然后为别名类型赋予方法。 但是，要注意接收者的类型定义和方法声明必须在同一包内，不能为内建类型声明方法。 2.用结构体指针作为方法接收者 作为方法的函数可以对接收者内的元素进行直接的操作，若要使得操作生效，就需要将一般方法接收者升级为指向改接受者的指针，否则函数修改的只是接收者的副本，并不会对原结构体类型生效。 func (*v Vertex) Scale(f float64) { v.X = v.X * f v.Y = v.Y * f } 3.指针重定向 通常带指针参数的函数只能接收指针类型实参，值传递型函数只接受值传入。但方法不同，如果接受者为指针类型，那么在调用方法时接收者可以为值也可以为指针类型，因为系统会将值解释为指针类型，即实现定向。 var v Vertex v.Scale(5) // OK p := \u0026v p.Scale(10) // OK 同样的事情也发生在相反的方向，当方法的接受者为值类型，那么在调用方法时如果接收者为指针，系统会将其转化为值类型 var v Vertex fmt.Println(v.Abs()) // OK p := \u0026v fmt.Println(p.Abs()) // OK 4.选择值或指针做接收者 使用指针接收者的原因有二： 首先，方法能够修改其接收者指向的值。 其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。 通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:4:1","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":[],"content":"接口 1.相关描述 接口是一种数据类型，是由一组方法签名定义的集合 接口类型的变量可以保存任何实现了这些方法的值 外界参量需与接口内部方法的接受者类型保持一致才能够让接口保存参量 代码片段如下： func (v *Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } type Abser interface { Abs() float64 } func main() { var a Abser f := MyFloat(-math.Sqrt2) v := Vertex{3, 4} a = f // a MyFloat 实现了 Abser a = \u0026v // a *Vertex 实现了 Abser // 下面一行，v 是一个 Vertex（而不是 *Vertex） // 所以没有实现 Abser。 a = v fmt.Println(a.Abs()) } 2.接口与隐式实现 类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。 隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。 因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。 这个刚开始会有点难理解，不过可以通过代码来简化我们的理解： type I interface { M() N() } type T struct { S string } // 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。 func (t T) M() { fmt.Println(t.S) } func (t T) N() { fmt.Println(t.S, \"World\") } func main() { var i I = T{\"hello\"} i.M() i.N() } 如果实际接收者与接口内方法接收者类型相同，那么该数据类型表示便可以用接口名替换，该接收者也可以调用接口内对应方法。 ","date":"2022-09-10","objectID":"/%E6%B5%8B%E8%AF%95/:4:2","tags":[],"title":"Go Syntax","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it.","date":"2020-03-06","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 Requirements Thanks to the simplicity of Hugo, Hugo is the only dependency of this theme. Just install latest version of  Hugo (\u003e 0.62.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo? Since Markdown Render Hooks was introduced in the Hugo Christmas Edition, this theme only supports Hugo versions above 0.62.0. Hugo extended version is recommended Since some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 Installation The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 Create Your Project Hugo provides a new command to create a new website: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 Install the Theme The LoveIt theme’s repository is: https://github.com/dillonzq/LoveIt. You can download the latest release  .zip file of the theme and extract it in the themes directory. Alternatively, clone this repository to the themes directory: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt Or, create an empty git repository and make this repository a submodule of your site directory: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 Basic Configuration The following is a basic configuration for the LoveIt theme: baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"English\" # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false Note When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 Create Your First Post Here is the way to create your first post: hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note By default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo command. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 Launching the Website Locally Launch by using the following command: hugo serve Go to http://localhost:1313. Basic configuration preview Tip When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Note Since the theme use .Scratch in Hugo to implement some features, it is highly recommended that you add --disableFastRender parameter to hugo server command for the live preview of the page you are editing. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 Build the Website When your site is ready to deploy, run the following command: hugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server. Tip The website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use AWS Amplify, Github pages, Render and more… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 Configuration ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 Site Configuration In addition to Hugo global configuration and menu configuration, LoveIt lets you define the following parameters in your site configuration (here is a config.toml, whose values are default). Please open the code block below to view the complete sample configuration : baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"English\" # whether to include Chinese/Japanese/Korean hasCJKLanguage = false # default amount of posts in each pages paginate = 12 # google analytics code [UA-XXXXXXXX-X] googleAnalytics = \"\" # copyright description used only for seo schema copyright = \"\" # whether to use robots.txt enableRobotsTXT = true # whether to use git commit log enableGitInfo = true # whether to use emoji code enableEmoji = true # ignore some build errors ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [params] # site default theme [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # date format dateFormat = \"2006-01-02\" # website title for Open Graph and Twitter Cards title = \"My cool site\" # website description for RSS, SEO, Open Graph and Twitter Cards description = \"This is my cool site\" # website images for Open Graph and Twitter Cards images = [\"/logo.png\"] # Header config [params.header] # desktop header mode [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # mobile header mode [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2019 # ICP info only in China (HTML format is supported) icp = \"\" # license info (HTML format is supported) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # App icon config [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher title = \"My cool site\" # whether to omit favicon resource links noFavicon = false # modern SVG favicon to use","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 Favicons, Browserconfig, Manifest It is recommended to put your own favicons: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) into /static. They’re easily created via https://realfavicongenerator.net/. Customize browserconfig.xml and site.webmanifest to set theme-color and background-color. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 Style Customization Note Hugo extended version is necessary for the style customization. LoveIt theme has been built to be as configurable as possible by defining custom .scss style files. The directory including the custom .scss style files is assets/css relative to your project root directory. In assets/css/_override.scss, you can override the variables in themes/LoveIt/assets/css/_variables.scss to customize the style. Here is a example: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; In assets/css/_custom.scss, you can add some css style code to customize the style. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 Multilingual and i18n LoveIt theme is fully compatible with Hugo multilingual mode, which provides in-browser language switching. Language Switch ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 Compatibility Language Hugo Code HTML lang Attribute Theme Docs Lunr.js Support English en en Simplified Chinese zh-cn zh-CN Traditional Chinese zh-tw zh-TW French fr fr Polish pl pl Brazilian Portuguese pt-br pt-BR Italian it it Spanish es es German de de German de de Serbian sr sr Russian ru ru Romanian ro ro Vietnamese vi vi Arabic ar ar Catalan ca ca Thai th th Telugu te te Indonesian id id Turkish tr tr Korean ko ko Hindi hi hi ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 Basic Configuration After learning how Hugo handle multilingual websites, define your languages in your site configuration. For example with English, Chinese and French website: # determines default content language [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"en\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[languages.en.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[languages.en.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" languageCode = \"zh-CN\" languageName = \"简体中文\" hasCJKLanguage = true [[languages.zh-cn.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" [[languages.fr.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" [[languages.fr.menu.main]] weight = 3 identifier = \"categories\" name = \"Catégories\" pre = \"\" post = \"\" url = \"/categories/\" title = \"\" Then, for each new page, append the language code to the file name. Single file my-page.md is split in three files: in English: my-page.en.md in Chinese: my-page.zh-cn.md in French: my-page.fr.md Note Be aware that only translated pages are displayed in menu. It’s not replaced with default language content. Tip Use Front Matter parameter to translate urls too. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 Overwrite Translation Strings Translations strings are used for common default values used in the theme. Translations are available in some languages, but you may use another language or want to override default values. To override these values, create a new file in your local i18n folder i18n/\u003clanguageCode\u003e.toml and inspire yourself from themes/LoveIt/i18n/en.toml. By the way, as these translations could be used by other people, please take the time to propose a translation by  making a PR to the theme! ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 Search Based on Lunr.js or algolia, searching is supported in LoveIt theme. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 Output Configuration In order to generate index.json for searching, add JSON output file type to the home of the outputs part in your site configuration. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 Search Configuration Based on index.json generated by Hugo, you could activate searching. Here is the search configuration in your site configuration: [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" How to choose search engine? The following is a comparison of two search engines: lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Tips about algolia You need to upload index.json files to algolia to activate searching. You could upload the index.json files by browsers but a CLI tool may be better. The official Algolia CLI is a good choice. To be compatible with Hugo multilingual mode, you need to upload different index.json for each language to the different index of algolia, such as zh-cn/index.json or fr/index.json… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":null,"content":"About LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Features ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Plausible Analytics supported  Yandex Metrica supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Appearance and Layout  Desktop/Mobile responsive layout  Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 73 social links supported  Up to 24 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  utterances comment system supported by utterances  giscus comment system supported by giscus ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightGallery  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $\\KaTeX$  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent  Person shortcode … ","date":"2019-08-02","objectID":"/about/:1:4","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Special Thanks Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"About LoveIt","uri":"/about/"}]