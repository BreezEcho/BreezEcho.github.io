<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>BreezEcho's Blog</title><link>https://breezecho.github.io/</link><description>Hugo theme - LoveIt</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>l1477319644@163.com (BreezEcho)</managingEditor><webMaster>l1477319644@163.com (BreezEcho)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 10 Sep 2022 21:08:48 +0800</lastBuildDate><atom:link href="https://breezecho.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Theme Documentation - Basics</title><link>https://breezecho.github.io/theme-documentation-basics/</link><pubDate>Fri, 06 Mar 2020 21:29:01 +0800</pubDate><author>Dillon</author><guid>https://breezecho.github.io/theme-documentation-basics/</guid><description>&lt;p>Discover what the Hugo - &lt;strong>LoveIt&lt;/strong> theme is all about and the core-concepts behind it.&lt;/p></description></item><item><title>测试</title><link>https://breezecho.github.io/%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 10 Sep 2022 21:08:48 +0800</pubDate><author>BreezEcho</author><guid>https://breezecho.github.io/%E6%B5%8B%E8%AF%95/</guid><description><![CDATA[包、变量和函数 待填
流程控制语句（for、if、else、switch和defer） 待填
实用的类型 切片 相关特性 切片的长度len：切片内包含元素的数量 切片的容量cap：受切片起点影响，由当前对数组引用形成的切片起点，到原数组末的元素数量 当切片的长度与容量皆为0，则切片又被命名为nil（零值） 特点 切片是基于数组但又更灵活的 通过append(s, elem)能够将若干元素加入切片 Range遍历 可以用Range来遍历数组 Range在遍历各元素时，会返回当前元素的下标和数值，因此在循环遍历中需要用两个变量来承接，如果不需要某个方面如下标，可以用_填充该方面，一般会先返回下标，再返回数值。若只要索引，可以忽略掉第二个变量 映射 相关描述 映射将键连接到值 映射的零值是nil，nil既没有键，也没有值 make函数会返回给定类型的映射，并将其初始化，通常用make来无参初始化一个映射 1 2 3 m = make(map[int]Vertex) … m[“hello”] = 8 // 对映射进行设置 映射的文法 1 2 3 4 5 6 7 8 var m = map[string]Vertex{ &#34;Bell Labs&#34;: Vertex{ 40.68433, -74.39967, }, &#34;Google&#34;: Vertex{ 37.42202, -122.08408, }, } 若顶级类型为一个系统类型名，则可以省略，例如上述的{}中的Vertex
对映射的高级处理（在上述基础上） 1 2 3 4 5 6 m[“a”] = 1 m[“a”] = 2 // 修改映射 elem = m[“a”] // 获取键对应的值 v, ok = m[“a”] // 查询键a是否在映射中,	若不在映射，则将v作为键“a“的零值 函数 函数不仅可以做参数，还可以做函数的返回值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( &#34;fmt&#34; &#34;math&#34; ) func compute(fn func(float64, float64) float64) float64 { return fn(3, 4) } // 函数可以做参数 func main() { hypot := func(x, y float64) float64 { return math.]]></description></item><item><title>monarch</title><link>https://breezecho.github.io/monarch/</link><pubDate>Sat, 07 Mar 2020 21:29:01 +0800</pubDate><author>BreezEcho</author><guid>https://breezecho.github.io/monarch/</guid><description>系统层面 system
mapthink
tenet
prejudice
mechanism
辅助认知 knowyourself</description></item></channel></rss>